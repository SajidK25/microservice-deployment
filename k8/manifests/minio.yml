apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: microservices
  labels:
    app: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      securityContext:
        runAsNonRoot: true
      containers:
      - name: minio
        image: minio/minio
        resources:
          limits:
            memory: "500Mi"
            cpu: "500m"
          requests:
            memory: "300Mi"
            cpu: "100m"
        env:
        - name: MINIO_ROOT_USER
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: minio-root-user
        - name: MINIO_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: microservices-secrets
              key: minio-root-password
        - name: MINIO_PROMETHEUS_AUTH_TYPE
          value: "public"
        - name: MINIO_UPDATE
          value: "off"
        command:
        - sh
        - -euc
        - |
          mkdir -p /data/loki-data && \
          mkdir -p /data/loki-ruler && \
          minio server /data
        volumeMounts:
        - name: minio-storage
          mountPath: /data
        ports:
        - containerPort: 9000
        livenessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /minio/health/live
            port: 9000
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: minio-storage
        persistentVolumeClaim:
          claimName: minio-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: microservices
spec:
  selector:
    app: minio
  ports:
  - protocol: TCP
    port: 9000
    targetPort: 9000
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-server-files
  namespace: microservices
data:
  gateway-service.yml: |
    management:
      endpoints:
        web:
          exposure:
            include: "*"
      endpoint:
        health:
          show-details: always
      health:
        circuitbreakers:
          enabled: true
      tracing:
        sampling:
          probability: 1.0
    resilience4j:
      circuitbreaker:
        instances:
          ecomBreaker:
            registerHealthIndicator: true
            slidingWindowSize: 10
            minimumNumberOfCalls: 5
            permittedNumberOfCallsInHalfOpenState: 3
            waitDurationInOpenState: 10s
            failureRateThreshold: 50
            automaticTransitionFromOpenToHalfOpenEnabled: true
            slidingWindowType: count_based
    # SECURITY
    spring:
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: http://localhost:8443/realms/ecom-app
  gateway-service-docker.yml: |
    server:
      port: 8080
    logging:
      level:
        org.springframework.security: DEBUG
        org.springframework.security.oauth2: DEBUG
        org.springframework.web: INFO
        org.keycloak: INFO
    management:
      endpoints:
        web:
          exposure:
            include: "*"
      endpoint:
        health:
          show-details: always
      health:
        circuitbreakers:
          enabled: true
      tracing:
        sampling:
          probability: 1.0
      zipkin:
        tracing:
          endpoint: ${ZIPKIN_URL:http://zipkin:9411/api/v2/spans}
    # Circuit Breaker
    resilience4j:
      circuitbreaker:
        instances:
          ecomBreaker:
            registerHealthIndicator: true
            slidingWindowSize: 10
            minimumNumberOfCalls: 5
            permittedNumberOfCallsInHalfOpenState: 3
            waitDurationInOpenState: 10s
            failureRateThreshold: 50
            automaticTransitionFromOpenToHalfOpenEnabled: true
            slidingWindowType: count_based
    # SECURITY
    spring:
      security:
        oauth2:
          resourceserver:
            jwt:
              # Must exactly match the tokenâ€™s iss claim (the public URL)
              issuer-uri: http://localhost:8443/realms/ecom-app
              # Where to fetch signing keys _inside_ Docker
              jwk-set-uri: http://keycloak:8080/realms/ecom-app/protocol/openid-connect/certs
      zipkin:
        baseUrl: http://zipkin:9411
    eureka:
      client:
        serviceUrl:
          defaultZone: http://eureka-server:8761/eureka/
        register-with-eureka: true
        fetch-registry: true
  order-service.yml: |
    spring:
      datasource:
        url: ${DB_URL}
        username: ${DB_USER}
        password: ${DB_PASSWORD}
      cloud:
        stream:
          bindings:
            createOrder-out-0:
              destination: order.exchange
              content-type: application/json
          kafka:
            binder:
              brokers: localhost:9092
      jpa:
        database: POSTGRESQL
        show-sql: true
        hibernate:
          ddl-auto: update
        database-platform: org.hibernate.dialect.PostgreSQLDialect
    server:
      port: 8083
    management:
      endpoints:
        web:
          exposure:
            include: "*"
      endpoint:
        health:
          show-details: always
      health:
        circuitbreakers:
          enabled: true
      tracing:
        sampling:
          probability: 1.0
    app:
      message: "Hello Order!"
    eureka:
      client:
        serviceUrl:
          defaultZone: http://localhost:8761/eureka/
        register-with-eureka: true
        fetch-registry: true
    logging:
      file:
        name: logs/${spring.application.name}.log
      logback:
        rollingpolicy:
          max-file-size: 5MB
          max-history: 7
    # Circuit Breaker
    resilience4j:
      circuitbreaker:
        instances:
          productService:
            registerHealthIndicator: true
            slidingWindowSize: 10
            minimumNumberOfCalls: 5
            permittedNumberOfCallsInHalfOpenState: 3
            waitDurationInOpenState: 10s
            failureRateThreshold: 50
            automaticTransitionFromOpenToHalfOpenEnabled: true
            slidingWindowType: count_based
      retry:
        instances:
          retryBreaker:
            maxAttempts: 5
            waitDuration: 5s
      ratelimiter:
        instances:
          rateBreaker:
            timeout-duration: 0
            limit-refresh-period: 4s
            limit-for-period: 2
  order-service-docker.yml: |
    spring:
      datasource:
        url: ${DB_URL}
        username: ${DB_USER}
        password: ${DB_PASSWORD}
      cloud:
        stream:
          bindings:
            createOrder-out-0:
              destination: order.exchange
              content-type: application/json
          kafka:
            binder:
              brokers: kafka:9092
      jpa:
        database: POSTGRESQL
        show-sql: true
        hibernate:
          ddl-auto: update
        database-platform: org.hibernate.dialect.PostgreSQLDialect
    server:
      port: 8083
    management:
      endpoints:
        web:
          exposure:
            include: "*"
      endpoint:
        health:
          show-details: always
      health:
        circuitbreakers:
          enabled: true
      tracing:
        sampling:
          probability: 1.0
      zipkin:
        tracing:
          endpoint: ${ZIPKIN_URL:http://zipkin:9411/api/v2/spans}
    app:
      message: "Hello Order!"
    eureka:
      client:
        serviceUrl:
          defaultZone: http://eureka-server:8761/eureka/
        register-with-eureka: true
        fetch-registry: true
    logging:
      file:
        name: logs/${spring.application.name}.log
      logback:
        rollingpolicy:
          max-file-size: 5MB
          max-history: 7
    # Circuit Breaker
    resilience4j:
      circuitbreaker:
        instances:
          productService:
            registerHealthIndicator: true
            slidingWindowSize: 10
            minimumNumberOfCalls: 5
            permittedNumberOfCallsInHalfOpenState: 3
            waitDurationInOpenState: 10s
            failureRateThreshold: 50
            automaticTransitionFromOpenToHalfOpenEnabled: true
            slidingWindowType: count_based
      retry:
        instances:
          retryBreaker:
            maxAttempts: 5
            waitDuration: 5s
      ratelimiter:
        instances:
          rateBreaker:
            timeout-duration: 0
            limit-refresh-period: 4s
            limit-for-period: 2
  product-service.yml: |
    spring:
      datasource:
        url: ${DB_URL}
    #    url: jdbc:mysql://localhost:3307/embarkx
        username: ${DB_USER}
        password: ${DB_PASSWORD}
      rabbitmq:
        host: ${RABBITMQ_HOST:localhost}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_USERNAME:guest}
        password: ${RABBITMQ_PASSWORD:guest}
        virtual-host: ${RABBITMQ_VHOST:guest}
        connection-timeout: 30000
      jpa:
        database: POSTGRESQL
        show-sql: true
        hibernate:
          ddl-auto: update
        database-platform: org.hibernate.dialect.PostgreSQLDialect
        properties:
          hibernate:
            format_sql: true
    server:
      port: 8081
    management:
      endpoints:
        web:
          exposure:
            include: "*"
      tracing:
        sampling:
          probability: 1.0
    app:
      message: "Hello Product!"
    eureka:
      client:
        serviceUrl:
          defaultZone: http://localhost:8761/eureka/
        register-with-eureka: true
        fetch-registry: true
    logging:
      file:
        name: logs/${spring.application.name}.log
      logback:
        rollingpolicy:
          max-file-size: 5MB
          max-history: 7
  product-service-docker.yml: |
    spring:
      datasource:
        url: ${DB_URL}
    #    url: jdbc:mysql://localhost:3307/embarkx
        username: ${DB_USER}
        password: ${DB_PASSWORD}
      rabbitmq:
        host: ${RABBITMQ_HOST:localhost}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_USERNAME:guest}
        password: ${RABBITMQ_PASSWORD:guest}
        virtual-host: ${RABBITMQ_VHOST:guest}
        connection-timeout: 30000
      jpa:
        database: POSTGRESQL
        show-sql: true
        hibernate:
          ddl-auto: update
        database-platform: org.hibernate.dialect.PostgreSQLDialect
        properties:
          hibernate:
            format_sql: true
      zipkin:
        base-url: http://zipkin:9411
        enabled: true
    server:
      port: 8081
    management:
      endpoints:
        web:
          exposure:
            include: "*"
      tracing:
        sampling:
          probability: 1.0
      zipkin:
        tracing:
          endpoint: ${ZIPKIN_URL:http://zipkin:9411/api/v2/spans}
    app:
      message: "Hello Product Docker!"
    eureka:
      client:
        serviceUrl:
          defaultZone: http://eureka-server:8761/eureka/
        register-with-eureka: true
        fetch-registry: true
    logging:
      file:
        name: logs/${spring.application.name}.log
      logback:
        rollingpolicy:
          max-file-size: 5MB
          max-history: 7
  user-service.yml: |
    spring:
      data:
        mongodb:
          uri: ${MONGO_URI}
          database: ecom_user
      rabbitmq:
        host: ${RABBITMQ_HOST:localhost}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_USERNAME:guest}
        password: ${RABBITMQ_PASSWORD:guest}
        virtual-host: ${RABBITMQ_VHOST:guest}
        connection-timeout: 30000
    server:
      port: 8082
    management:
      endpoints:
        web:
          exposure:
            include: "*"
      tracing:
        sampling:
          probability: 1.0
    eureka:
      client:
        serviceUrl:
          defaultZone: http://localhost:8761/eureka/
        register-with-eureka: true
        fetch-registry: true
    logging:
      file:
        name: logs/${spring.application.name}.log
      logback:
        rollingpolicy:
          max-file-size: 5MB
          max-history: 7
    # KEYCLOAK
    keycloak:
      admin:
        username: user
        password: user
        server-url: http://localhost:8443
        realm: ecom-app
        client-id: admin-cli
        client-uid: e00d8aec-e2d6-49e9-aae7-dc097acfb514
  user-service-docker.yml: |
    spring:
      data:
        mongodb:
          uri: ${MONGO_URI}
          database: ecom_user
      rabbitmq:
        host: ${RABBITMQ_HOST:localhost}
        port: ${RABBITMQ_PORT:5672}
        username: ${RABBITMQ_USERNAME:guest}
        password: ${RABBITMQ_PASSWORD:guest}
        virtual-host: ${RABBITMQ_VHOST:guest}
        connection-timeout: 30000
    server:
      port: 8082
    management:
      endpoints:
        web:
          exposure:
            include: "*"
      tracing:
        sampling:
          probability: 1.0
      zipkin:
        tracing:
          endpoint: ${ZIPKIN_URL:http://zipkin:9411/api/v2/spans}
    eureka:
      client:
        serviceUrl:
          defaultZone: http://eureka-server:8761/eureka/
        register-with-eureka: true
        fetch-registry: true
    logging:
      file:
        name: logs/${spring.application.name}.log
      logback:
        rollingpolicy:
          max-file-size: 5MB
          max-history: 7
    # KEYCLOAK
    keycloak:
      admin:
        username: user
        password: user
        server-url: http://keycloak:8080
        realm: ecom-app
        client-id: admin-cli
        client-uid: e00d8aec-e2d6-49e9-aae7-dc097acfb514
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: config-server
  namespace: microservices
  labels:
    app: config-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: config-server
  template:
    metadata:
      labels:
        app: config-server
    spec:
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      securityContext:
        runAsNonRoot: true
      containers:
        - name: config-server
          image: bluewhale007/configserver:latest
          resources:
            limits:
              memory: "700Mi"
              cpu: "500m"
            requests:
              memory: "300Mi"
              cpu: "100m"
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "native"
            - name: SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS
              value: "/config"
            - name: RABBITMQ_HOST
              valueFrom:
                secretKeyRef:
                  name: microservices-secrets
                  key: rabbitmq-host
            - name: RABBITMQ_PORT
              value: "5672"
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: microservices-secrets
                  key: rabbitmq-username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: microservices-secrets
                  key: rabbitmq-password
            - name: RABBITMQ_VHOST
              valueFrom:
                secretKeyRef:
                  name: microservices-secrets
                  key: rabbitmq-vhost
          volumeMounts:
            - name: config-volume
              mountPath: /config
          ports:
            - containerPort: 8888
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8888
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8888
            initialDelaySeconds: 10
            periodSeconds: 5
      volumes:
        - name: config-volume
          configMap:
            name: config-server-files
---
apiVersion: v1
kind: Service
metadata:
  name: config-server
  namespace: microservices
spec:
  selector:
    app: config-server
  ports:
    - protocol: TCP
      port: 8888
      targetPort: 8888
  type: ClusterIP

---
# ConfigMap for Loki configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: microservices
data:
  loki.yaml: |
    auth_enabled: false
    server:
      http_listen_port: 3100
    common:
      replication_factor: 1
      storage:
        s3:
          endpoint: http://minio:9000
          s3forcepathstyle: true
          insecure: true
          bucketnames: loki-chunks
          access_key_id: ${MINIO_ACCESS_KEY}
          secret_access_key: ${MINIO_SECRET_KEY}
    schema_config:
      configs:
      - from: "2025-07-29"
        store: tsdb
        object_store: s3
        schema: v13
        index:
          prefix: loki_index_
          period: 24h
    compactor:
      compaction_interval: 10m
      retention_enabled: true
      retention_delete_delay: 2h
    limits_config:
      retention_period: 24h
      ingestion_rate_mb: 4
      ingestion_burst_size_mb: 6
---
# Secret for Minio credentials
apiVersion: v1
kind: Secret
metadata:
  name: loki-minio-secrets
  namespace: microservices
type: Opaque
data:
  MINIO_ACCESS_KEY: bWluaW8= # base64-encoded "minio"
  MINIO_SECRET_KEY: bWluaW8xMjM= # base64-encoded "minio123"
---
# ConfigMap for Alloy configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: microservices
data:
  config.alloy: |
    loki.source.file "log_scrape" {
      targets = [
        { __path__ = "/mnt/data/logs/*.log" }
      ]
      forward_to = [loki.write.loki.receiver]
      tail_from_end = true
    }
    loki.write "loki" {
      endpoint {
        url = "http://loki-gateway.microservices:3100/loki/api/v1/push"
        tenant_id = "tenant1"
      }
      external_labels = {
        cluster = "vagrant-k8s"
      }
      retry_on_http_429 = true
      min_backoff_period = "500ms"
      max_backoff_period = "5s"
      max_backoff_retries = 3
    }
---
# Loki Deployment (Simple Scalable Mode)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-write
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki-write
  template:
    metadata:
      labels:
        app: loki-write
    spec:
      serviceAccountName: microservices-sa
      containers:
      - name: loki
        image: grafana/loki:3.0.0
        args:
        - -target=write
        - -config.file=/etc/loki/loki.yaml
        ports:
        - containerPort: 3100
          name: http
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: loki-minio-secrets
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: loki-minio-secrets
              key: MINIO_SECRET_KEY
      volumes:
      - name: loki-config
        configMap:
          name: loki-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-read
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki-read
  template:
    metadata:
      labels:
        app: loki-read
    spec:
      containers:
      - name: loki
        image: grafana/loki:3.0.0
        args:
        - -target=read
        - -config.file=/etc/loki/loki.yaml
        ports:
        - containerPort: 3100
          name: http
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: loki-minio-secrets
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: loki-minio-secrets
              key: MINIO_SECRET_KEY
      volumes:
      - name: loki-config
        configMap:
          name: loki-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-backend
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki-backend
  template:
    metadata:
      labels:
        app: loki-backend
    spec:
      containers:
      - name: loki
        image: grafana/loki:3.0.0
        args:
        - -target=backend
        - -config.file=/etc/loki/loki.yaml
        ports:
        - containerPort: 3100
          name: http
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: loki-minio-secrets
              key: MINIO_ACCESS_KEY
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: loki-minio-secrets
              key: MINIO_SECRET_KEY
      volumes:
      - name: loki-config
        configMap:
          name: loki-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki-gateway
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki-gateway
  template:
    metadata:
      labels:
        app: loki-gateway
    spec:
      containers:
      - name: nginx
        image: nginx:1.25
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: loki-gateway-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-gateway-config
  namespace: microservices
data:
  nginx.conf: |
    events {}
    http {
      server {
        listen 80;
        location / {
          proxy_pass http://loki-write.microservices:3100;
        }
        location /loki/api/v1/push {
          proxy_pass http://loki-write.microservices:3100;
        }
        location /loki/api/v1/query {
          proxy_pass http://loki-read.microservices:3100;
        }
        location /loki/api/v1/query_range {
          proxy_pass http://loki-read.microservices:3100;
        }
      }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: loki-gateway
  namespace: microservices
spec:
  selector:
    app: loki-gateway
  ports:
  - protocol: TCP
    port: 3100
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: loki-write
  namespace: microservices
spec:
  selector:
    app: loki-write
  ports:
  - protocol: TCP
    port: 3100
    targetPort: 3100
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: loki-read
  namespace: microservices
spec:
  selector:
    app: loki-read
  ports:
  - protocol: TCP
    port: 3100
    targetPort: 3100
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: loki-backend
  namespace: microservices
spec:
  selector:
    app: loki-backend
  ports:
  - protocol: TCP
    port: 3100
    targetPort: 3100
  type: ClusterIP
---
# Alloy Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alloy
  namespace: microservices
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alloy
  template:
    metadata:
      labels:
        app: alloy
    spec:
      containers:
      - name: alloy
        image: grafana/alloy:latest
        args:
        - run
        - /etc/alloy/config.alloy
        ports:
        - containerPort: 12345
          name: alloy-ui
        volumeMounts:
        - name: alloy-config
          mountPath: /etc/alloy
        - name: log-volume
          mountPath: /mnt/data/logs
      volumes:
      - name: alloy-config
        configMap:
          name: alloy-config
      - name: log-volume
        hostPath:
          path: /mnt/data/logs
---
apiVersion: v1
kind: Service
metadata:
  name: alloy
  namespace: microservices
spec:
  selector:
    app: alloy
  ports:
  - protocol: TCP
    port: 12345
    targetPort: 12345
  type: ClusterIP
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: microservices
data:
  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
      - name: Loki
        type: loki
        access: proxy
        url: http://loki-gateway:3100
        jsonData:
          httpHeaderName1: "X-Scope-OrgID"
        secureJsonData:
          httpHeaderValue1: "tenant1"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: microservices
  labels:
    app: grafana
spec:
  serviceAccountName: microservices-sa
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"
      securityContext:
        runAsNonRoot: true
      containers:
      - name: grafana
        image: grafana/grafana:latest
        resources:
          limits:
            memory: "500Mi"
            cpu: "500m"
          requests:
            memory: "300Mi"
            cpu: "100m"
        env:
        - name: GF_PATHS_PROVISIONING
          value: "/etc/grafana/provisioning"
        - name: GF_AUTH_ANONYMOUS_ENABLED
          value: "true"
        - name: GF_AUTH_ANONYMOUS_ORG_ROLE
          value: "Admin"
        command:
        - sh
        - -euc
        - |
          mkdir -p /etc/grafana/provisioning/datasources
          cp /etc/grafana/datasources/datasources.yml /etc/grafana/provisioning/datasources/ds.yaml
          /run.sh
        volumeMounts:
        - name: grafana-datasources
          mountPath: /etc/grafana/datasources
        ports:
        - containerPort: 3000
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: microservices
spec:
  selector:
    app: grafana
  ports:
  - protocol: TCP
    port: 3000
    targetPort: 3000
  type: ClusterIP